[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "E155 Blog",
    "section": "",
    "text": "First Week of MicroP’s\n\n\nMy thoughts after week 1 of MicroP’s\n\n\n\n\n\nSep 4, 2025\n\n\nMatthew Molinar\n\n\n\n\n\n\n\n\n\n\n\n\nInitial Reflections Post\n\n\nWelcome to my Quarto portfolio\n\n\n\n\n\nAug 27, 2025\n\n\nMatthew Molinar\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Matthew Molinar is an Engineering student at Harvey Mudd College. His interests are in the field of electrical engineering, with a particular focus on RF and digital signal processing."
  },
  {
    "objectID": "posts/second-post.html",
    "href": "posts/second-post.html",
    "title": "First Week of MicroP’s",
    "section": "",
    "text": "I think lab 1 took me a lot longer that I anticipated. Soldering was definitely a time suck and I also hadn’t touched system verilog in so long. That being said, I think the first lab was a good way to revist the system verilog and practice writing a lab report. I’m hoping that lab 2 will be a much smoother sail after having done lab 1. Going into lab 2, I will make sure to start with testbenches before going to hardware. I think this would be a good way to verify that my design works and help save a lot of time debugging."
  },
  {
    "objectID": "labs/lab1/lab1.html",
    "href": "labs/lab1/lab1.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "In this lab, a design was implemented on the FPGA to demonstrate the functionality of the on-board high-speed oscillator by blinking one of the on-board LEDs. The high speed oscillator was configured at a frequency of 48 MHz and divided down using a counter to achieve a blinking frequency of 2.4 Hz.\nFurthermore, this design used 4 switches as inputs. These switches turned on an on-board LED by acting as a XOR gate and turned on another on-board LED by acting as an AND gate.\nFinally, this design used the same four switches, acting as a four bit binary number, to turn on a seven-segment display to show all hex digits from 0 to F.\n\n\n\nThis design consists of two lower level modules, which control a seven segment display and on-board LEDs. Both of these modules were called within a top level module.\nThe seven-segment module uses a case statemnt to map 4 bit hex digit inputs to its corresponding seven-segment output. As a result, flipping switches s[3:0] would display the correct hex digits ranging from 0 to F. Although, I wasn’t able to verify this module with testbenches, I was able to verify that it functioned as expected by visually confirming correct hex digit representation using hardware.\nThe LED control module was used to blink on-board LEDs. First, the on-board high speed oscillator (HSOSC) was used to generate a 48 MHz signal. Then, a counter set to 20 million was used to divide the clock signal. As a result, led[2] was toggled on and off at a frequency of 2.4 Hz. The other two LEDs were toggled using switches s[3:0]. The first led, led[0], was turned on by the XOR of s[0] and s[1]. The second led, led[1], was turned on by the AND of s[2] and s[3]. Again, I wasn’t able to verify this module with testbenches, but I was able to verify that it functioned as expected by visually confirming correct behavior using hardware.\nFinally, the top level design uses the switch inputs s[3:0] to control logic from the seven-segment and led control modules.\n\n\n\nThe source code for the project can be found in the associated GitHub repository.\n\n\n(Figure 1: Block Diagram of the Verilog Design)\nThe block diagram in Figure 1 demonstrates the overall architecture of the design. The top-level module, top, includes two submodules: the led control module (led_control) and the seven segment display module (seven_seg).\n\n\n\n(Figure 2: Schematic of physical layout)\nFigure 2 shows the physical layout of the design. The seven-segment display was connected using 162 Ω current-limmiting resistors to ensure the output current was about 8 mA. This was calculated using ohms law. The board is being powered with 3.3 V, and the display LEDs (deep red) have a forward voltage of 2 V. Therefore, (3.3 - 2 V) / 162 Ω is ~ 8 mA.\n\n\n\n\nThe design met all intended design objectives. This was verified via visual confirmation of the on-board LEDs and the seven-segment display lighting up as intetned when switches were flipped in different configurations. Given more time, I would have done test bench simulations as this would be a much better tool for verifying that a design works exactly as intended.\n\n\n\nThe design succesfully blinked an on-board LED at 2.4 Hz, toggled on-board LED’s based on XOR and AND gate behavior, and displayed hex digits from 0 to F on a seven-segment display. I spent a total of 15 hours on this lab.\n\n\n\nFor the following AI Prototype, I will be using ChatGPT.\n\n\nWrite SystemVerilog HDL to leverage the internal high speed oscillator in the Lattice UP5K FPGA and blink an LED at 2 Hz. Take full advantage of SystemVerilog syntax, for example, using logic instead of wire and reg.\n\n\n\n// Blink an LED at 2 Hz using the internal HFOSC of the UP5K module top ( output logic led // drive LED pin );\n// Internal oscillator (HFOSC) primitive\nlogic clk_hf, clk_en;\n\n// Lattice UP5K HFOSC instantiation\n// CLKHF_DIV: \"0b00\" = 48 MHz, \"0b01\" = 24 MHz, \"0b10\" = 12 MHz\n// Here we choose 12 MHz to make the divider smaller.\nHSOSC #(\n    .CLKHF_DIV(\"0b10\")  // 12 MHz\n) u_hfosc (\n    .CLKHFPU(1'b1),     // power up\n    .CLKHFEN(1'b1),     // enable\n    .CLKHF(clk_hf)      // clock output\n);\n\n// Parameters for blink frequency\nlocalparam int CLK_FREQ_HZ = 12_000_000;   // HFOSC = 12 MHz\nlocalparam int BLINK_HZ    = 2;            // desired blink rate\nlocalparam int HALF_PERIOD = CLK_FREQ_HZ / (2 * BLINK_HZ);\n\n// Counter for frequency division\nlogic [$clog2(HALF_PERIOD)-1:0] counter;\n\n// LED toggle logic\nalways_ff @(posedge clk_hf) begin\n    if (counter == HALF_PERIOD-1) begin\n        counter &lt;= '0;\n        led &lt;= ~led;\n    end else begin\n        counter &lt;= counter + 1;\n    end\nend\nendmodule\n\n\n\nI think the quality of the output is really high because it produced very clean and readable code. I was mostly able to follow the code that was generated, however, it used syntax such as localparam and $clog2 that was new to me. Surprisingly, the LLM-generated code synthesized first round. I think this was largely due to the prompt that it was fed. Thus when using LLMs in my workflow I will make sure to be as descriptive as possible. Next time however, I will make sure to ask about specifc syntax that it’s using that I am not familiar with."
  },
  {
    "objectID": "labs/lab1/lab1.html#lab-1-fpga-and-mcu-setup-and-testing",
    "href": "labs/lab1/lab1.html#lab-1-fpga-and-mcu-setup-and-testing",
    "title": "E155 Portfolio",
    "section": "",
    "text": "In this lab, a design was implemented on the FPGA to demonstrate the functionality of the on-board high-speed oscillator by blinking one of the on-board LEDs. The high speed oscillator was configured at a frequency of 48 MHz and divided down using a counter to achieve a blinking frequency of 2.4 Hz.\nFurthermore, this design used 4 switches as inputs. These switches turned on an on-board LED by acting as a XOR gate and turned on another on-board LED by acting as an AND gate.\nFinally, this design used the same four switches, acting as a four bit binary number, to turn on a seven-segment display to show all hex digits from 0 to F.\n\n\n\nThis design consists of two lower level modules, which control a seven segment display and on-board LEDs. Both of these modules were called within a top level module.\nThe seven-segment module uses a case statemnt to map 4 bit hex digit inputs to its corresponding seven-segment output. As a result, flipping switches s[3:0] would display the correct hex digits ranging from 0 to F. Although, I wasn’t able to verify this module with testbenches, I was able to verify that it functioned as expected by visually confirming correct hex digit representation using hardware.\nThe LED control module was used to blink on-board LEDs. First, the on-board high speed oscillator (HSOSC) was used to generate a 48 MHz signal. Then, a counter set to 20 million was used to divide the clock signal. As a result, led[2] was toggled on and off at a frequency of 2.4 Hz. The other two LEDs were toggled using switches s[3:0]. The first led, led[0], was turned on by the XOR of s[0] and s[1]. The second led, led[1], was turned on by the AND of s[2] and s[3]. Again, I wasn’t able to verify this module with testbenches, but I was able to verify that it functioned as expected by visually confirming correct behavior using hardware.\nFinally, the top level design uses the switch inputs s[3:0] to control logic from the seven-segment and led control modules.\n\n\n\nThe source code for the project can be found in the associated GitHub repository.\n\n\n(Figure 1: Block Diagram of the Verilog Design)\nThe block diagram in Figure 1 demonstrates the overall architecture of the design. The top-level module, top, includes two submodules: the led control module (led_control) and the seven segment display module (seven_seg).\n\n\n\n(Figure 2: Schematic of physical layout)\nFigure 2 shows the physical layout of the design. The seven-segment display was connected using 162 Ω current-limmiting resistors to ensure the output current was about 8 mA. This was calculated using ohms law. The board is being powered with 3.3 V, and the display LEDs (deep red) have a forward voltage of 2 V. Therefore, (3.3 - 2 V) / 162 Ω is ~ 8 mA.\n\n\n\n\nThe design met all intended design objectives. This was verified via visual confirmation of the on-board LEDs and the seven-segment display lighting up as intetned when switches were flipped in different configurations. Given more time, I would have done test bench simulations as this would be a much better tool for verifying that a design works exactly as intended.\n\n\n\nThe design succesfully blinked an on-board LED at 2.4 Hz, toggled on-board LED’s based on XOR and AND gate behavior, and displayed hex digits from 0 to F on a seven-segment display. I spent a total of 15 hours on this lab.\n\n\n\nFor the following AI Prototype, I will be using ChatGPT.\n\n\nWrite SystemVerilog HDL to leverage the internal high speed oscillator in the Lattice UP5K FPGA and blink an LED at 2 Hz. Take full advantage of SystemVerilog syntax, for example, using logic instead of wire and reg.\n\n\n\n// Blink an LED at 2 Hz using the internal HFOSC of the UP5K module top ( output logic led // drive LED pin );\n// Internal oscillator (HFOSC) primitive\nlogic clk_hf, clk_en;\n\n// Lattice UP5K HFOSC instantiation\n// CLKHF_DIV: \"0b00\" = 48 MHz, \"0b01\" = 24 MHz, \"0b10\" = 12 MHz\n// Here we choose 12 MHz to make the divider smaller.\nHSOSC #(\n    .CLKHF_DIV(\"0b10\")  // 12 MHz\n) u_hfosc (\n    .CLKHFPU(1'b1),     // power up\n    .CLKHFEN(1'b1),     // enable\n    .CLKHF(clk_hf)      // clock output\n);\n\n// Parameters for blink frequency\nlocalparam int CLK_FREQ_HZ = 12_000_000;   // HFOSC = 12 MHz\nlocalparam int BLINK_HZ    = 2;            // desired blink rate\nlocalparam int HALF_PERIOD = CLK_FREQ_HZ / (2 * BLINK_HZ);\n\n// Counter for frequency division\nlogic [$clog2(HALF_PERIOD)-1:0] counter;\n\n// LED toggle logic\nalways_ff @(posedge clk_hf) begin\n    if (counter == HALF_PERIOD-1) begin\n        counter &lt;= '0;\n        led &lt;= ~led;\n    end else begin\n        counter &lt;= counter + 1;\n    end\nend\nendmodule\n\n\n\nI think the quality of the output is really high because it produced very clean and readable code. I was mostly able to follow the code that was generated, however, it used syntax such as localparam and $clog2 that was new to me. Surprisingly, the LLM-generated code synthesized first round. I think this was largely due to the prompt that it was fed. Thus when using LLMs in my workflow I will make sure to be as descriptive as possible. Next time however, I will make sure to ask about specifc syntax that it’s using that I am not familiar with."
  },
  {
    "objectID": "posts/first-post.html",
    "href": "posts/first-post.html",
    "title": "Initial Reflections Post",
    "section": "",
    "text": "My main goal for this semester in MicroP’s is to learn new skills that will be useful to me as an electrical engineer. I haven’t had much experience working with embedded systems, so I would love to become more comfortable in this realm. I really enjoy music, so for my final project I think working on something audio related would be really fun."
  },
  {
    "objectID": "labs.html#lab-2-multiplexed-7-segment-display",
    "href": "labs.html#lab-2-multiplexed-7-segment-display",
    "title": "E155 Labs",
    "section": "Lab 2: Multiplexed 7-Segment Display",
    "text": "Lab 2: Multiplexed 7-Segment Display"
  },
  {
    "objectID": "labs.html#lab-3-keypad-scanner",
    "href": "labs.html#lab-3-keypad-scanner",
    "title": "E155 Labs",
    "section": "Lab 3: Keypad Scanner",
    "text": "Lab 3: Keypad Scanner"
  },
  {
    "objectID": "labs.html#lab-4-digital-audio",
    "href": "labs.html#lab-4-digital-audio",
    "title": "E155 Labs",
    "section": "Lab 4: Digital Audio",
    "text": "Lab 4: Digital Audio"
  },
  {
    "objectID": "labs.html#lab-5-interrupts",
    "href": "labs.html#lab-5-interrupts",
    "title": "E155 Labs",
    "section": "Lab 5: Interrupts",
    "text": "Lab 5: Interrupts"
  },
  {
    "objectID": "labs.html#lab-6-the-internet-of-things-and-serial-peripheral-interface",
    "href": "labs.html#lab-6-the-internet-of-things-and-serial-peripheral-interface",
    "title": "E155 Labs",
    "section": "Lab 6: The Internet of Things and Serial Peripheral Interface",
    "text": "Lab 6: The Internet of Things and Serial Peripheral Interface"
  },
  {
    "objectID": "labs.html#lab-7-the-advanced-encryption-standard",
    "href": "labs.html#lab-7-the-advanced-encryption-standard",
    "title": "E155 Labs",
    "section": "Lab 7: The Advanced Encryption Standard",
    "text": "Lab 7: The Advanced Encryption Standard"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "E155 Resources",
    "section": "",
    "text": "E155 Course Website"
  }
]